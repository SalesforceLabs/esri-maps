<apex:page lightningStylesheets="true" controller="Basic_Map_Create_Ctr" docType="html-5.0" showHeader="false" sidebar="false"> 
    <style>
        html,
        body,
         
  .mapContainer {
        padding: 0;
        margin: 0;
        height: 100%;
        width: 100%;
        }
        
    .loadingIcon {
  margin: 0;
  position: absolute;
  top: 50%;
  left: 50%;
  margin-right: -50%;
}
    </style>
    
        <apex:stylesheet value="{!URLFOR($Resource.ESRIINIT, '/esri/themes/light/main.css')}"/>
    <apex:includeScript loadOnReady="true" value="{!URLFOR($Resource.ESRIINIT, '/init.js')}"/>
    
    <script>
    var geometry;
    var area;
    var locationSelected;
    var graphicsLayer;
    var graphicsLayer1;
    let fixedarea = 0;
    
    
    var defaultlng = {!JSENCODE(defaultlng)};
    var defaultlat = {!JSENCODE(defaultlat)};
    
   
    var lat;
    var lon;
    
    
    if (defaultlat!='NA')
    {
        lat = defaultlat; 
        lon = defaultlng; 
    }
    else
    {
        lat = {!JSENCODE(strLat)}; 
        lon = {!JSENCODE(strLon)};
    }
    
    </script>
    <apex:outputPanel id="container">
    <script>
       function loadMaps(){
           
    require(
        [
            "esri/config",
            "esri/Map",
            "esri/views/MapView",
            "esri/widgets/ScaleBar",
            "esri/widgets/Sketch",
            "esri/Graphic",
            "esri/layers/GraphicsLayer",
            "esri/geometry/geometryEngine",
            "esri/widgets/Search",
            "esri/geometry/support/webMercatorUtils"
        ],
        (
            esriConfig,
            Map,
            MapView,
            ScaleBar,
            Sketch,
            Graphic,
            GraphicsLayer,
            geometryEngine,
            Search,
            webMercatorUtils
        ) => {
            esriConfig.apiKey = "{!JSENCODE(apiKey)}";
            const map = new Map({
                basemap: "arcgis-imagery", // Basemap layer service
            });

            
            const view = new MapView({
                container: "viewDiv",
                map: map,
                center: [lon, lat],
                zoom: 17,
                constraints: {
                    rotationEnabled: false,
                    minZoom: 15
                }
            });
            const search = new Search({
                view: view
            });
          
            
            
        view.watch('updating', function(evt){
            if(evt === true){
                document.getElementsByClassName('loadingIcon')[0].style.display='block';
            }else{
                document.getElementsByClassName('loadingIcon')[0].style.display='none';
                }
        })  
            search.on('search-complete', function(result) {
                if (result.results && result.results.length > 0 && result.results[0].results && result.results[0].results.length > 0) {
                    var geom = result.results[0].results[0].feature.geometry;
                }
            });

            view.ui.add(search, "top-right");
            const scalebar = new ScaleBar({
                view: view,
                unit: "metric"
            });

            view.ui.add(scalebar, "bottom-right");
            graphicsLayer = new GraphicsLayer();
            graphicsLayer1 = new GraphicsLayer();

            map.add(graphicsLayer);
            map.add(graphicsLayer1);

            
           const sketch = new Sketch({
                layer: graphicsLayer1,
                view: view,
                availableCreateTools: ["polygon", "rectangle", "circle"],
                creationMode: "update",
                updateOnGraphicClick: true,
                visibleElements: {
                    createTools: {
                        point: false,
                        circle: true
                    },
                    selectionTools: {
                        "lasso-selection": false,
                        "rectangle-selection": false,
                    },
                    settingsMenu: false,
                    undoRedoMenu: false,
                },
                defaultUpdateOptions: {
                    enableRotation: false,
                    enableScaling: false,
                    enableZ: false,
                    multipleSelectionEnabled: false,
                    toggleToolOnClick: false
                }
            });
            view.ui.add(sketch, "top-right");

            view.on("pointer-move", function(event) {
                view.hitTest(event).then(function(response) {
                    if (response.results.length) {
                        var graphic = response.results[0].graphic;
                        if (graphic.geometry && graphic.attributes && graphic.attributes.Id) {
                            let htmlContent = '<p> </p>';
                            view.popup.open({
                                title: 'Details',
                                location: graphic.geometry.centroid,
                                content: htmlContent
                            });
                        }
                    } else {
                        view.popup.close();
                    }
                });
            });

            sketch.on("delete", (e) => {
            });

            sketch.on("update", (e) => {
                geometry = e.graphics[0].geometry;

            });
            sketch.on("create", function(event) {
                if (event.state === "complete") {
                    let geomDetails = webMercatorUtils.webMercatorToGeographic(event.graphic.geometry).toJSON();
                    locationSelected = geomDetails.rings[0][0];
                }
            });
            sketch.on("update", function(event) {
                const eventInfo = event.toolEventInfo;
                if (eventInfo && eventInfo.type.includes("move")) {
                    sketch.cancel();
                }
            });
        });

        }
       function saveData() {

        let geo;
        let details = {};

        let polygonRings = [];
        let index=000;
        graphicsLayer1.graphics.items.forEach(ele => {

            let polygonData = {
                "spatialReference": {
                        "latestWkid": ele.geometry.spatialReference.latestWkid,
                        "wkid": ele.geometry.spatialReference.wkid
                    },
                    "rings": ele.geometry.rings
            };
            let polygonRing = {
                "data" : JSON.stringify(polygonData),
                "name":"LOC-"+index
            }
            polygonRings.push(polygonRing);
            index++;
        });
        
       

        if (polygonRings.length < 1) {
            details.error = 'No polygons found';
        } else if (polygonRings.length > 1) {
            details.error = 'Only only polygon can be added';
        } else {
            details.geometry = polygonRings;          
            details.lng = locationSelected[0];
            details.lat = locationSelected[1];
            
        }

        geo = JSON.stringify(details);

        sendToLWC(geo);
    }
    
    function sendToLWC(geo) {
        var payload = geo;
        var message = {
            name: "storeDetails",
            payload: payload,
            location: locName
        };
        parent.postMessage(message, lexOriginCommunity);
    }
     var locName;
    function createSymbol(color, style, width, outlineColor) {
        return {
            type: "simple-fill",
            style: style,
            color: color,
            outline: {
                color: outlineColor,
                width: width
            }
        };
    }
    
   
    </script>
</apex:outputPanel>
    <body>
        <div class="loadingIcon">
            <apex:image url="{!$Resource.loading}" width="50" height="50"/>
        </div>
    <div id="viewDiv" class="mapContainer"></div>  
    </body> 
    <apex:form >        
        <apex:actionFunction name="sendToApex" action="{!fetchTimeDetails}" oncomplete="loadMaps();" reRender="container">
            <apex:param name="p1" value="" assignTo="{!schDetails}" />
        </apex:actionFunction>   
    </apex:form>
<script>

var lexOriginCommunity = window.location.origin;

message = {
    name:"pageLoaded",
    location : locName
};
parent.postMessage(message,lexOriginCommunity);
    window.addEventListener("message", function(event) {
        
        let recdMsg = JSON.parse(event.data);
        if (!locName) {
            locName = recdMsg.detail.name;
        }
        if (locName == recdMsg.detail.name) {
            
            if (recdMsg.title == 'captureDetails') {
                saveData();
            } else if (recdMsg.title == 'fetchDetails') {
                 
                  sendToApex(JSON.stringify(recdMsg.detail));
                 
            }

        }
    });
    
</script>

</apex:page>